#!/bin/bash

bold=`echo -en "\e[1m"`
underline=`echo -en "\e[4m"`
normal=`echo -en "\e[0m"`
red=`echo -en "\e[31m"`
green=`echo -en "\e[32m"`
lightaqua=`echo -en "\e[96m"`
orange=`echo -en "\e[33m"`
purple=`echo -en "\e[35m"`
clear
echo "${bold}${underline}${purple}Debian 10 - Server with go api installation and configuration script$normal"

## if not root check ###########################################################
if [ "$EUID" -ne 0 ] ;then

  ## Install sudo ##############################################################
  normaluser=$USER

  pkgs='sudo'
  if ! dpkg -s $pkgs >/dev/null 2>&1; then
    echo "${green}Enter root pw$normal"
    su - root bash -c "apt -qq -y install sudo"
    su - root bash -c "/sbin/adduser $normaluser sudo"
    echo "${orange}sudo installed pls logout and login and restart script -.-$normal"
    exit 1
  fi

  ## Info / prerequisites text #################################################
  echo "${orange}Prerequisites:$normal"
  echo "- A Debian 10 server with SSH"
  echo "- You need a domain name. https://www.freenom.com/"
  echo "- You need DNS records type A:"
  echo "  api -> WAN IP"
  echo "  or even better caa records for better security"
  echo "- Port forwarding HTTP and HTTPS on router to server IP"
  echo

  ## update system #############################################################
  echo -n "${green}Update system (y/n)? $normal"
  read answer
  if [ "$answer" != "${answer#[Yy]}" ] ;then
    sudo apt -qq -y update
    sudo apt -qq -y upgrade
  fi

  ## nginx #####################################################################
  echo -n "${green}Install and configure nginx (y/n)? $normal"
  read answer
  if [ "$answer" != "${answer#[Yy]}" ] ;then
    sudo apt -qq -y install nginx
    read -p "${green}Enter webroot directory (/var/www): $normal" webroot
    #TODO: create possibility to add domains with normal conf no reverse proxy
    read -p "${green}Please enter domains separated by space. (example.com api.example.com blog.example.com): $normal" domains

    for domain in $domains
    do
      ##TODO ask for reverseproxy location ip:port
      sudo mkdir -p $webroot/${domain}/public
      sudo chown -R $USER:$USER $webroot/${domain}/public
      sudo chmod -R 755 $webroot/$domain

      read -p "${green}Enter proxy_pass for $domain (http://127.0.0.1:8080): $normal" proxy_pass

      echo "
      server {
          listen                  443 ssl http2;
          listen                  [::]:443 ssl http2;
          server_name             $domain;
          # SSL
          ssl_certificate         /etc/letsencrypt/live/$domain/fullchain.pem;
          ssl_certificate_key     /etc/letsencrypt/live/$domain/privkey.pem;
          ssl_trusted_certificate /etc/letsencrypt/live/$domain/chain.pem;
          # security
          include                 security.conf;
          # logging
          access_log              /var/log/nginx/$domain.access.log;
          error_log               /var/log/nginx/$domain.error.log warn;
          # reverse proxy
          location / {
              proxy_pass $proxy_pass;
              include    proxy.conf;
          }
          # additional config
          include general.conf;
      }
      # HTTP redirect
      server {
          listen      80;
          listen      [::]:80;
          server_name $domain;
          include     letsencrypt.conf;
          location / {
              return 301 https://$domain\$request_uri;
          }
      }
      " | sudo tee /etc/nginx/sites-available/$domain.conf
    done

    echo "
    user                 www-data;
    pid                  /run/nginx.pid;
    worker_processes     auto;
    worker_rlimit_nofile 65535;
    events {
        multi_accept       on;
        worker_connections 65535;
    }
    http {
        charset              utf-8;
        sendfile             on;
        tcp_nopush           on;
        tcp_nodelay          on;
        server_tokens        off;
        log_not_found        off;
        types_hash_max_size  2048;
        client_max_body_size 16M;
        # MIME
        include              mime.types;
        default_type         application/octet-stream;
        # Logging
        access_log           /var/log/nginx/access.log;
        error_log            /var/log/nginx/error.log warn;
        # SSL
        ssl_session_timeout  1d;
        ssl_session_cache    shared:SSL:10m;
        ssl_session_tickets  off;
        # Diffie-Hellman parameter for DHE ciphersuites
        ssl_dhparam          /etc/nginx/dhparam.pem;
        ssl_ecdh_curve       secp384r1;
        # Mozilla Intermediate configuration
        ssl_protocols        TLSv1.2 TLSv1.3;
        #ssl_ciphers          ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_ciphers          EECDH+AESGCM:EDH+AESGCM;
        # OCSP Stapling
        ssl_stapling         on;
        ssl_stapling_verify  on;
        resolver             1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 valid=60s;
        resolver_timeout     2s;
        # Load configs
        include              /etc/nginx/conf.d/*.conf;
        include              /etc/nginx/sites-enabled/*;
    }
    " | sudo tee /etc/nginx/nginx.conf

    echo "
    # ACME-challenge
    location ^~ /.well-known/acme-challenge/ {
        root $webroot/_letsencrypt;
    }
    " | sudo tee /etc/nginx/letsencrypt.conf

    echo "
    # security headers
    add_header X-Frame-Options           \"SAMEORIGIN\" always;
    add_header X-XSS-Protection          \"1; mode=block\" always;
    add_header X-Content-Type-Options    \"nosniff\" always;
    add_header Referrer-Policy           \"no-referrer-when-downgrade\" always;
    add_header Content-Security-Policy   \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always;
    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" always;
    # . files
    location ~ /\.(?!well-known) {
        deny all;
    }
    " | sudo tee /etc/nginx/security.conf

    echo "
    # favicon.ico
    location = /favicon.ico {
        log_not_found off;
        access_log    off;
    }
    # robots.txt
    location = /robots.txt {
        log_not_found off;
        access_log    off;
    }
    # gzip
    gzip            on;
    gzip_vary       on;
    gzip_proxied    any;
    gzip_comp_level 6;
    gzip_types      text/plain text/css text/xml application/json application/javascript application/rss+xml application/atom+xml image/svg+xml;
    " | sudo tee /etc/nginx/general.conf

    echo "
    proxy_http_version                 1.1;
    proxy_cache_bypass                 \$http_upgrade;
    # Proxy headers
    proxy_set_header Upgrade           \$http_upgrade;
    proxy_set_header Connection        "upgrade";
    proxy_set_header Host              \$host;
    proxy_set_header X-Real-IP         \$remote_addr;
    proxy_set_header X-Forwarded-For   \$proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto \$scheme;
    proxy_set_header X-Forwarded-Host  \$host;
    proxy_set_header X-Forwarded-Port  \$server_port;
    # Proxy timeouts
    proxy_connect_timeout              60s;
    proxy_send_timeout                 60s;
    proxy_read_timeout                 60s;
    " | sudo tee /etc/nginx/proxy.conf

    sudo openssl dhparam -out /etc/nginx/dhparam.pem 4096
    for domain in $domains
    do
      sudo ln -s /etc/nginx/sites-available/$domain.conf /etc/nginx/sites-enabled/
      #Comment out SSL related directives in the configuration:

      sudo sed -i 's/.*443/#&/' /etc/nginx/sites-available/$domain.conf
      sudo sed -i 's/.*ssl_/#&/' /etc/nginx/sites-available/$domain.conf

      #sudo sed -i -r 's/(listen .*443)/\1;#/g; s/(ssl_(certificate|certificate_key|trusted_certificate) )/#;#\1/g' /etc/nginx/sites-available/$domain.conf

      sudo nginx -t
      sudo systemctl restart nginx
      #install certbot and create cert
      sudo apt install -qq -y certbot
      sudo mkdir -p $webroot/_letsencrypt
      sudo chown www-data $webroot/_letsencrypt

      withoutsub=$(sed 's/.*\.\(.*\..*\)/\1/' <<< $domain)
      #certbot letsencrypt:
      sudo certbot certonly --webroot -d $domain -w $webroot/_letsencrypt -n --email info@$withoutsub --agree-tos --force-renewal --redirect --uir --hsts --staple-ocsp --must-staple --rsa-key-size 4096
      #Uncomment SSL related directives in the configuration:

      sudo sed -i '/^#.*443/s/^#//' /etc/nginx/sites-available/$domain.conf
      sudo sed -i '/^#.*ssl_/s/^#//' /etc/nginx/sites-available/$domain.conf

      #sudo sed -i -r 's/#?;#//g' /etc/nginx/sites-available/$domain.conf

    done
    sudo nginx -t && sudo systemctl reload nginx
    # Configure Certbot to reload NGINX when it successfully renews certificates:
    echo -e '#!/bin/bash\nnginx -t && systemctl reload nginx' | sudo tee /etc/letsencrypt/renewal-hooks/post/nginx-reload.sh
    sudo chmod a+x /etc/letsencrypt/renewal-hooks/post/nginx-reload.sh
  fi

  ## firewall ##################################################################
  echo -n "${green}Install and configure firewall (y/n)? $normal"
  read answer
  if [ "$answer" != "${answer#[Yy]}" ] ;then
    sudo apt -qq -y install ufw
    sudo ufw allow SSH
    sudo ufw allow "Nginx Full"
    echo "y" | sudo ufw enable
    sudo ufw status
  fi

  ## fail2ban ##################################################################
  echo -n "${green}Install and configure fail2ban (y/n)? $normal"
  read answer
  if [ "$answer" != "${answer#[Yy]}" ] ;then
    sudo apt -qq -y install fail2ban
    sudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local #because jail.conf gets overriden by updates
    sudo sed -i '/\[nginx-http-auth\]/a enabled = true' /etc/fail2ban/jail.local
    sudo systemctl restart fail2ban
    sudo fail2ban-client status
  fi

  ## install and configure GIT #################################################
  echo -n "${green}Install and configure git (y/n)? $normal"
  read answer
  if [ "$answer" != "${answer#[Yy]}" ] ;then
    read -p "${green}Enter your git username: $normal" gitusername
    read -p "${green}Enter your git email: $normal" gitemail
    sudo apt -qq -y install git
    git config --global user.name $gitusername
    git config --global user.email $gitemail
  fi

  ## install golang 1.15 #######################################################
  echo -n "${green}Install and configure golang 1.15 (y/n)? $normal"
  read answer
  if [ "$answer" != "${answer#[Yy]}" ] ;then
    sudo wget -c https://dl.google.com/go/go1.15.3.linux-amd64.tar.gz -O - | sudo tar -xz -C /usr/local
    sudo chown -R root:root /usr/local/go # eventuell überflüssig wenn script als root
    echo 'export GOROOT=/usr/local/go' >> '.profile'
    echo 'export GOPATH=$HOME/go' >> '.profile'
    echo 'export PATH=$PATH:$GOROOT/bin:$GOPATH/bin' >> '.profile'
    source ~/.profile
    echo "${orange}Go installed pls logout and login and restart script and continue with db$normal"
    exit 1
  fi

  ## install postgres ##########################################################
  echo -n "${green}Install and configure postgres (y/n)? $normal"
  read answer
  if [ "$answer" != "${answer#[Yy]}" ] ;then
    read -s -p "${green}Enter password for $normaluser: $normal" normaluserpw
    echo
    sudo apt -qq -y install postgresql-11
    sudo apt -qq -y install postgresql-client
    sudo su - postgres bash -c "psql -c \"CREATE USER $normaluser WITH PASSWORD '$normaluserpw';\""
    sudo su - postgres bash -c "psql -c 'CREATE DATABASE \"$normaluser\" OWNER $normaluser;'"
  fi

  ## install mariadb ###########################################################
  echo -n "${green}Install and configure mariadb (y/n)? $normal"
  read answer
  if [ "$answer" != "${answer#[Yy]}" ] ;then
    read -s -p "${green}Enter password for $normaluser: $normal" normaluserpw
    echo
    read -s -p "${green}Enter root password: $normal" rootpw
    echo
    sudo apt -qq -y install mariadb-server mariadb-client
    echo "${lightaqua}Choose:"
    echo "Enter current password for root (enter for none): Just press the Enter
      Set root password? [Y/n]: Y
      Remove [Y/n]: Y
      Disallow [Y/n]: Y
      Remove [Y/n]:  Y
      Reload [Y/n]:  Y$normal"
    sudo mysql_secure_installation
    sudo mysql --database="mysql" --execute="UPDATE user SET plugin='' WHERE user ='root';FLUSH PRIVILEGES;"
    sudo systemctl restart mariadb
    sudo mysql --user="root" --password="$rootpw" --execute="GRANT ALL PRIVILEGES ON *.* TO '$normaluser'@'localhost' IDENTIFIED BY '$normaluserpw';"

  fi

  ## Install and configure go api #########################################
  echo -n "${green}Install and configure a go api (y/n)? $normal"
  read answer
  if [ "$answer" != "${answer#[Yy]}" ] ;then
    read -p "${green}Enter webroot directory (/var/www): $normal" webroot
    read -p "${green}domain for the api (api.example.com): $normal" domain
    read -p "${green}github PATH of the API u want to install (https://github.com/gabrielix29/go-rest-api): $normal" gitpath
    project_name=${gitpath//*\/} #after last / in github path is new var project_name
    db_name=${project_name//-/_} #replace("-","_")
    mkdir -p $HOME/go/src/$project_name
    cd $HOME/go/src/$project_name
    sudo mkdir -p $webroot/$domain
    sudo chown -R $normaluser $webroot/$domain
    #get project from github
    git clone $gitpath $HOME/go/src/$project_name
    #make api build in $webroot/$project_name or just build it there via golang editor or cmd
    go build -o $webroot/${domain}/$project_name $HOME/go/src/$project_name

    #input choose db mysql/postgres then create db here
    PS3="${lightaqua}Which database are you using?$normal"
    options=("mysql" "postgresql")
    select opt in "${options[@]}"
    do
        case $opt in
            "mysql")
                echo "you chose choice 1 mysql"
                read -s -p "${green}Enter password for $normaluser: $normal" normaluserpw
                echo
                sudo mysql --user="$normaluser" --password="$normaluserpw" --execute='CREATE DATABASE IF NOT EXISTS `'$db_name'` CHARACTER SET utf8 COLLATE utf8_general_ci' #needs testing!
                #todo config.json to mysql values
                break
                ;;
            "postgresql")
                echo "you chose choice 2 postgresql"
                sudo su - postgres bash -c "psql -c 'CREATE DATABASE \"$db_name\" OWNER $normaluser;'"
                #todo config.json to postgresql values
                break
                ;;
            *)
                echo "invalid option $REPLY"
                ;;
        esac
    done
    #todo change config.json values
    #todo create systemd /etc/systemd/system/api_name.service file
    #todo exec api_name migrate command
    #todo systemctl start servicename  --> executes the serve command in api_name.servicefile
  fi
  echo "${green}Done...$normal"
else
  echo "${red}Please DONT run script as root. Use normal user!$normal"
fi
